-- q1
commonWords :: Int -> Text -> String
commonWords n = concat . map showRun . take n .
 sortRuns . countRuns . sortWords .
 words . map toLower

showRun :: (Int, Word) -> String
showRun (n,w) = w ++ “: ” ++
 show n ++ “\n”

countRuns :: [Word] -> [(Int,Word)]
countRuns [] = []
countRuns (w:ws) = (1+length us,w) : countRuns vs
 where (us,vs) = span (==w) ws

sort [] = []
sort [x] = [x]
sort xs = merge (sort ys) (sort zs)
 where (ys,zs) = half xs
half xs = (take n xs, drop n xs)
 where n = length xs `div` 2
merge [] ys = ys
merge xs [] = xs
merge (x:xs) (y:ys)
 | x <= y = x : merge xs (y:ys)
 otherwise = y : merge (x:xs) ys

null :: [a] -> Bool
null [] = True
null (x:xs) = False

map :: (a -> b) -> [a] -> [b]
map f [] = []
map f (x:xs) = f x : map f xs

filter :: (a -> Bool) -> [a] -> [a]
filter p [] = []
filter p (x:xs) = if p x
                    then x : filter p xs
                    else filter p xs

sortWords :: [Word] -> [Word]
sortWords = sort
sortRuns :: [(Int,Word)] -> [(Int,Word)]
sortRuns = reverse . sort

length :: [a] -> Int
length [] = 0
length (_:xs) = 1 + length xs

span :: (a -> Bool) -> [a] -> ([a], [a])
span p [] = ([], [])
span p (x:xs) = if p x then (x:ys,zs)
 else ([],x:xs)
 where (ys,zs) = span p xs


-- q2
myTake :: Int -> [a] -> [a]
myTake 0 _ = []
myTake _ [] = []
myTake n (y : ys) | n > 0 = y : myTake (n - 1) ys
myTake _ _ = error "invalid args"

myDrop :: Int -> [a] -> [a]
myDrop 0 (y:ys) = (y:ys)
myDrop _ [] = []
myDrop n (_:ys) | n > 0 = myDrop (n-1) ys
myDrop _ _ = error "invalid args"